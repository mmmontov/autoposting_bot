from aiogram.types import Message, CallbackQuery
from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup, any_state, default_state
from aiogram.filters import StateFilter
from datetime import datetime

from app.services.format_text import format_main_menu_text
from app.bot.keyboards.post_actions_keyboard import *
from app.core.config import config
from app.parsing.recipes_parsing.ovkuse_parsing import *
from app.core.utils import ChannelsControl, update_system
from app.services.queue_service import *
from app.services.scheduler import *
from app.services.user_data import users_data
from app.bot.middlewares.admin_middlewares import AdminOnlyMiddleware


router = Router()
router.callback_query.middleware(AdminOnlyMiddleware())
router.message.middleware(AdminOnlyMiddleware())

# ================================= FSM States ======================================

class AddUserFSM(StatesGroup):
    waiting_for_userid = State()
    waiting_for_username = State()
    waiting_for_channel = State()
    

class UserProfileFSM(StatesGroup):
    user_profile = State()
    delete_user = State()
    waiting_for_username = State()
    waiting_for_channel = State()
    

# ===================================================================================

@router.callback_query(F.data == 'admin_menu')
async def process_admin_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    text = 'üîß –ê–¥–º–∏–Ω –º–µ–Ω—é'
    await callback.message.edit_text(text=text, 
                                     reply_markup=create_admin_menu_kb())
    await callback.answer()



@router.callback_query(F.data == 'update_users')
async def process_update_users(callback: CallbackQuery):
    await update_system()
    await callback.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞.', show_alert=True)
    

# ========================== Add user with channel =================================

# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
@router.callback_query(F.data == 'add_user')
async def process_add_user(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddUserFSM.waiting_for_userid)
    await callback.message.edit_text(text='–≤–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä–∏–º–µ—Ä (5689551653)',
                                     reply_markup=back_to_admin_menu_kb())
    
# –≤–≤–æ–¥ userid
@router.message(StateFilter(AddUserFSM.waiting_for_userid))
async def process_userid_input(message: Message, state: FSMContext):
    user_id = message.text.strip()
    if not user_id.isdigit():
        await message.answer('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    
    await state.update_data(user_id=user_id)
    await state.set_state(AddUserFSM.waiting_for_username)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                         reply_markup=back_to_admin_menu_kb())
    
# –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
@router.message(StateFilter(AddUserFSM.waiting_for_username))
async def process_username_input(message: Message, state: FSMContext):
    username = message.text.strip()
    if not username:
        await message.answer('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    
    await state.update_data(username=username)
    await state.set_state(AddUserFSM.waiting_for_channel)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, @test_channel)',
                         reply_markup=back_to_admin_menu_kb())
    
# –≤–≤–æ–¥ –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(StateFilter(AddUserFSM.waiting_for_channel))
async def process_channel_input(message: Message, state: FSMContext):
    channel_id = message.text.strip()
    if not channel_id or not channel_id.startswith('@'):
        await message.answer('ID –∫–∞–Ω–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    
    data = await state.get_data()
    user_id = data.get('user_id')
    username = data.get('username')
    
    try:
        await users_data.add_user_channel(user_id, channel_id, username)
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "{username}" —Å ID {user_id} –∏ –∫–∞–Ω–∞–ª–æ–º {channel_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.',
                             reply_markup=back_to_admin_menu_kb())
    except Exception as e:
        await message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}',
                             reply_markup=back_to_admin_menu_kb())
        
    await update_system()
    
    await state.clear()
    
    
# ==================================================================================



# ========================== edit all users ========================================

# –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(F.data == 'all_users')
async def process_all_users(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    users = users_data.get_all_user_ids()
    if not users:
        await callback.answer('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.', show_alert=True)
        return
    
    text = 'üìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n'
    data = {f'user:{user_id}': users_data.get_user_name(user_id)
            for user_id in users}
    data.update(ADMIN_CALLBACK['back_to_admin_menu'])

    await callback.message.edit_text(text=text, reply_markup=create_inline_kb(data, [2]*50))
    await callback.answer()
    
    
# –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith('user:'))
async def process_user_menu(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserProfileFSM.user_profile)
    user_id = callback.data.split(':')[1].strip()
    username = users_data.get_user_name(user_id)
    await state.update_data(user_id=user_id)
    await state.update_data(username=username)
    await callback.message.edit_text(text=f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username} ({user_id})',
                                     reply_markup=create_user_menu_kb())
    
    
# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == 'delete_user')
async def process_user_delete(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('user_id')
    await state.set_state(UserProfileFSM.delete_user)
    await callback.message.edit_text(text='–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?',
                                     reply_markup=create_confirm_delete_user_kb(user_id))
    
# —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == 'confirm_delete_user', StateFilter(UserProfileFSM.delete_user))
async def process_confirm_delete_user(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('user_id')
    await users_data.delete_user(user_id)
    await callback.message.edit_text(text='‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª—ë–Ω',
                                     reply_markup=back_to_admin_menu_kb())


# –≤—Å–µ –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == 'user_channels')
async def process_all_user_channels(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    username = data.get('username')
    user_id = data.get('user_id')
    user_channels = users_data.get_user_channels(user_id=user_id)
    channels_callback = {f'cahnnel:{channel}': channel for channel in user_channels}
    channels_callback.update(replace_user('user_channels', user_id))
    
    await callback.message.edit_text(text=f'–∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{username}" ({user_id})',
                                     reply_markup=create_inline_kb(channels_callback, [1]*len(user_channels)+[2]))
    


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.callback_query(F.data == 'add_chanel')
async def process_add_user_channel(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('user_id')
    user_channels = users_data.get_user_channels(user_id)  
    if len(user_channels) < 8:
        await state.set_state(UserProfileFSM.waiting_for_channel)
        await callback.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n(–Ω–∞–ø—Ä–∏–º–µ—Ä, @test_channel)',
                                        reply_markup=create_back_to_user_menu_kb(user_id))
    else:
        await callback.answer('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ.', 
                              show_alert=True)
    
# –≤–≤–æ–¥ –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(StateFilter(UserProfileFSM.waiting_for_channel))
async def process_user_channel_input(message: Message, state: FSMContext):
    channel_id = message.text.strip()
    if not channel_id or not channel_id.startswith('@'):
        await message.answer('ID –∫–∞–Ω–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    
    data = await state.get_data()
    user_id = data.get('user_id')
    
    try:
        await users_data.add_user_channel(user_id, channel_id)
        await message.answer(f'–ö–∞–Ω–∞–ª {channel_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.',
                             reply_markup=create_back_to_user_menu_kb(user_id))
        await update_system()
    except Exception as e:
        await message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}',
                             reply_markup=create_back_to_user_menu_kb(user_id))
    
    
# –º–µ–Ω—é –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith('cahnnel:'))
async def process_channel_menu(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('user_id')
    channel_name = callback.data.split(':')[1]
    await state.update_data(channel_name=channel_name)
    await callback.message.edit_text(text=f'–ö–∞–Ω–∞–ª: {channel_name}',
                                     reply_markup=create_channel_menu_kb(user_id))
    
    
# –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å parsing –∫–∞–Ω–∞–ª–∞
@router.callback_query(F.data == 'switch_parsing_status')
async def process_switch_parsing_status(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('user_id')
    channel_name = data.get('channel_name')
    current_status = users_data.get_parsing(user_id, channel_name)
    new_status = not current_status
    await users_data.set_parsing(user_id, channel_name, new_status)
    await callback.answer(text=f'–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ {channel_name} {"–≤–∫–ª—é—á—ë–Ω üëç" if new_status else "–≤—ã–∫–ª—é—á—ë–Ω üëé"}',
                                     show_alert=True)
    await update_system()
    
# —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–∞–ª—å—à–µ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
@router.callback_query(F.data == 'delete_channel')
async def process_delete_channel(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    channel_name = data.get('channel_name')
    user_id = data.get('user_id')
    user_channels = users_data.get_user_channels(user_id)
    if len(user_channels) == 1:
        await callback.answer('‚õî –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.', show_alert=True)
        return
    await callback.message.edit_text(text=f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª {channel_name}?',
                                     reply_markup=create_confirm_delete_channel_kb(channel_name))
    
# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
@router.callback_query(F.data == 'confirm_delete_channel')
async def process_confirm_delete_channel(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('user_id')
    channel_name = data.get('channel_name')
    
    try:
        await users_data.delete_user_channel(user_id, channel_name)
        await callback.message.edit_text(text=f'–ö–∞–Ω–∞–ª {channel_name} –±—ã–ª —É–¥–∞–ª—ë–Ω.',
                                         reply_markup=create_back_to_user_menu_kb(user_id))
        await update_system()
    except Exception as e:
        await callback.message.edit_text(text=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}',
                                         reply_markup=create_back_to_user_menu_kb(user_id))
        
        
# –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == 'change_username')
async def process_change_username(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('user_id')
    await state.set_state(UserProfileFSM.waiting_for_username)
    await callback.message.edit_text(text='‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                                     reply_markup=create_back_to_user_menu_kb(user_id))
    
# –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(StateFilter(UserProfileFSM.waiting_for_username))
async def process_waiting_for_username(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('user_id')
    new_username = message.text
    await users_data.set_user_name(user_id, new_username)
    await message.answer(text=f'‚úÖ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_username}',
                         reply_markup=create_back_to_user_menu_kb(user_id))
    await state.clear()